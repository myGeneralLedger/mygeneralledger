<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>General Ledger with Monthly Archives</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 30px; }
    table, th, td {
      border: 1px solid #aaa;
      border-collapse: collapse;
      padding: 6px;
    }
    table { width: 100%; margin-top: 10px; }
    th { background-color: #f0f0f0; }
    input, select, button { margin: 5px; padding: 6px; }
    .section { margin-bottom: 40px; }
    .subaccount { padding-left: 20px; }
    .subtotal { font-weight: bold; }
    .modal-backdrop {
      position: fixed; top:0; left:0; width:100%; height:100%;
      background: rgba(0,0,0,0.4);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }
    .modal {
      background: white; padding: 20px; border-radius: 6px;
      width: 300px; max-width: 90%;
      box-shadow: 0 0 10px #00000088;
    }
    .modal button { margin-top: 10px; }
  </style>
</head>
<body>

  <h1>General Ledger</h1>

  <!-- Add Account -->
  <div class="section">
    <h2>Add New Account</h2>
    <form id="addAccountForm">
      <input type="text" id="newAccountName" placeholder="Account Name" required>
      <select id="newAccountType" required>
        <option value="Asset">Asset</option>
        <option value="Liability">Liability</option>
        <option value="Equity">Equity</option>
        <option value="Revenue">Revenue</option>
        <option value="Expense">Expense</option>
      </select>
      <button type="submit">Add Account</button>
    </form>
  </div>

  <!-- Journal Entry -->
  <div class="section">
    <h2>New Journal Entry</h2>
    <form id="entryForm">
      <input type="date" id="date" required>
      <input type="text" id="description" placeholder="Description" required><br>
      <strong>Debit:</strong>
      <select id="debitAccount"></select>
      <input type="number" id="debitAmount" placeholder="Debit Amount" step="0.01" min="0"><br>
      <strong>Credit:</strong>
      <select id="creditAccount"></select>
      <input type="number" id="creditAmount" placeholder="Credit Amount" step="0.01" min="0"><br>
      <button type="submit">Post Entry</button>
    </form>
  </div>

  <!-- Journal -->
  <div class="section">
    <h2>Journal Entries</h2>
    <table id="journal">
      <thead>
        <tr><th>Date</th><th>Description</th><th>Account</th><th>Debit</th><th>Credit</th></tr>
      </thead>
      <tbody></tbody>
    </table>
    <button id="clearJournalEntriesBtn">Clear All Journal Entries</button>
  </div>

  <!-- Balance Sheet -->
  <div class="section">
    <h2>Balance Sheet</h2>
    <table id="balanceSheet">
      <thead><tr><th>Account</th><th>Type</th><th>Balance</th></tr></thead>
      <tbody></tbody>
    </table>
  </div>

  <!-- Income Statement -->
  <div class="section">
    <h2>Income Statement</h2>
    <table id="incomeStatement">
      <thead><tr><th>Account</th><th>Balance</th></tr></thead>
      <tbody></tbody>
    </table>
    <p><strong>Net Income:</strong> <span id="netIncome">0.00</span></p>
    <label for="closeMonthSelect">Close to Month:</label>
    <input type="month" id="closeMonthSelect">
    <button id="closeMonth">Close Month</button>
  </div>

  <!-- Archive Section -->
  <div class="section">
    <h2>Archived Journal Entries</h2>
    <select id="archivedJournalSelect">
      <option value="">-- Select Month --</option>
    </select>
    <table id="archivedJournalTable" style="display:none;">
      <thead>
        <tr><th>Date</th><th>Description</th><th>Account</th><th>Debit</th><th>Credit</th></tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <div class="section">
    <h2>Archived Income Statements</h2>
    <select id="archivedIncomeSelect">
      <option value="">-- Select Month --</option>
    </select>
    <table id="archivedIncomeTable" style="display:none;">
      <thead><tr><th>Account</th><th>Balance</th></tr></thead>
      <tbody></tbody>
      <tfoot>
        <tr><th>Net Income</th><th id="archivedNetIncome"></th></tr>
      </tfoot>
    </table>
  </div>

  <button id="hardResetBtn" style="margin-left: 20px; background:#d9534f; color:white;">Hard Reset (All Accounts & Balances)</button>

  <!-- Custom Modal for confirmation -->
  <div id="modalBackdrop" class="modal-backdrop">
    <div class="modal">
      <p id="modalMessage"></p>
      <button id="modalConfirmBtn">Confirm</button>
      <button id="modalCancelBtn">Cancel</button>
    </div>
  </div>

<script>
(() => {
  let accounts = [];
  let balances = {};
  let journalEntries = [];
  let archivedJournals = {};
  let archivedIncomeStatements = {};

  function pad(n){ return n < 10 ? "0" + n : n; }
  function getMonthKeyFromDateString(dateStr) {
    const d = new Date(dateStr);
    if (isNaN(d)) return "";
    return `${d.getFullYear()}-${pad(d.getMonth() + 1)}`;
  }

  function saveData() {
    localStorage.setItem("ledger_accounts", JSON.stringify(accounts));
    localStorage.setItem("ledger_balances", JSON.stringify(balances));
    localStorage.setItem("ledger_journal", JSON.stringify(journalEntries));
    localStorage.setItem("ledger_archived_journals", JSON.stringify(archivedJournals));
    localStorage.setItem("ledger_archived_income", JSON.stringify(archivedIncomeStatements));
  }
  function loadData() {
    accounts = JSON.parse(localStorage.getItem("ledger_accounts")) || [
      { name: "Cash", type: "Asset" },
      { name: "Accounts Payable", type: "Liability" },
      { name: "Retained Earnings", type: "Equity" },
      { name: "Sales Revenue", type: "Revenue" },
      { name: "Consulting Revenue", type: "Revenue", parent: "Sales Revenue" },
      { name: "Utilities Expense", type: "Expense" },
      { name: "Wages Expense", type: "Expense" }
    ];
    balances = JSON.parse(localStorage.getItem("ledger_balances")) || {};
    journalEntries = JSON.parse(localStorage.getItem("ledger_journal")) || [];
    archivedJournals = JSON.parse(localStorage.getItem("ledger_archived_journals")) || {};
    archivedIncomeStatements = JSON.parse(localStorage.getItem("ledger_archived_income")) || {};
    
    accounts.forEach(acc => { if (!(acc.name in balances)) balances[acc.name] = 0; });
  }

  function renderAccountOptions() {
    const debitSelect = document.getElementById("debitAccount");
    const creditSelect = document.getElementById("creditAccount");
    debitSelect.innerHTML = "";
    creditSelect.innerHTML = "";
    accounts.forEach(acc => {
      const text = `${acc.name} (${acc.type})`;
      debitSelect.add(new Option(text, acc.name));
      creditSelect.add(new Option(text, acc.name));
    });
  }

  function renderJournal() {
    const tbody = document.querySelector("#journal tbody");
    tbody.innerHTML = "";
    journalEntries.forEach(entry => {
      tbody.innerHTML +=
        `<tr>
          <td>${entry.date}</td>
          <td>${entry.description}</td>
          <td>${entry.debit.account}</td>
          <td>${entry.debit.amount.toFixed(2)}</td>
          <td></td>
        </tr>
        <tr>
          <td>${entry.date}</td>
          <td>${entry.description}</td>
          <td>${entry.credit.account}</td>
          <td></td>
          <td>${entry.credit.amount.toFixed(2)}</td>
        </tr>`;
    });
  }

  function renderBalanceSheet() {
    const tbody = document.querySelector("#balanceSheet tbody");
    tbody.innerHTML = "";
    const groups = { Asset: [], Liability: [], Equity: [] };
    accounts.forEach(acc => {
      if (["Asset","Liability","Equity"].includes(acc.type)) groups[acc.type].push(acc);
    });
    for (const type of ["Asset","Liability","Equity"]) {
      groups[type].sort((a,b) => a.name.localeCompare(b.name));
      let groupTotal = 0;
      tbody.innerHTML += `<tr class="subtotal"><td colspan="3">${type}</td></tr>`;
      groups[type].forEach(acc => {
        const isSub = !!acc.parent;
        const bal = balances[acc.name] || 0;
        groupTotal += bal;
        tbody.innerHTML += `<tr>
          <td style="padding-left:${isSub ? 20 : 0}px">${acc.name}</td>
          <td>${acc.type}</td>
          <td>${bal.toFixed(2)}</td>
        </tr>`;
      });
      tbody.innerHTML += `<tr class="subtotal"><td colspan="2">${type} Total</td><td>${groupTotal.toFixed(2)}</td></tr>`;
    }
  }

  function renderIncomeStatement() {
    const tbody = document.querySelector("#incomeStatement tbody");
    const netEl = document.getElementById("netIncome");
    tbody.innerHTML = "";

    const revs = accounts.filter(a => a.type === "Revenue");
    const exps = accounts.filter(a => a.type === "Expense");

    function groupAccounts(accts) {
      const parents = {};
      accts.forEach(acc => {
        const p = acc.parent || null;
        if (!parents[p]) parents[p] = [];
        parents[p].push(acc);
      });
      return parents;
    }

    const revGroups = groupAccounts(revs);
    const expGroups = groupAccounts(exps);

    let totalRevenue = 0;
    let totalExpense = 0;

    function renderGroup(groups, parentKey, isRevenue) {
      let subtotal = 0;
      if (!groups[parentKey]) return 0;

      groups[parentKey].forEach(acc => {
        const balRaw = balances[acc.name] || 0;
        const bal = isRevenue ? balRaw : balRaw;
        subtotal += bal;

        const indentPx = acc.parent ? 20 : 0;
        const displayBal = bal < 0 ? `(${Math.abs(bal).toFixed(2)})` : bal.toFixed(2);
        tbody.innerHTML += `<tr>
          <td class="subaccount" style="padding-left:${indentPx}px">${acc.name}</td>
          <td>${displayBal}</td>
        </tr>`;

        subtotal += renderGroup(groups, acc.name, isRevenue);
      });
      if(parentKey !== null) {
        tbody.innerHTML += `<tr class="subtotal">
          <td style="padding-left:${parentKey ? 10 : 0}px">${parentKey} Subtotal</td>
          <td>${subtotal < 0 ? `(${Math.abs(subtotal).toFixed(2)})` : subtotal.toFixed(2)}</td>
        </tr>`;
      }
      return subtotal;
    }

    totalRevenue = renderGroup(revGroups, null, true);
    totalExpense = renderGroup(expGroups, null, false);

    const netIncome = totalRevenue + totalExpense;
    netEl.textContent = netIncome < 0 ? `(${Math.abs(netIncome).toFixed(2)})` : netIncome.toFixed(2);
  }

  function updateArchiveDropdowns() {
    const journalSelect = document.getElementById("archivedJournalSelect");
    const incomeSelect = document.getElementById("archivedIncomeSelect");

    function populateSelect(selectEl, archiveObj) {
      selectEl.innerHTML = '<option value="">-- Select Month --</option>';
      const months = Object.keys(archiveObj).sort().reverse();
      months.forEach(m => {
        selectEl.add(new Option(m, m));
      });
    }
    populateSelect(journalSelect, archivedJournals);
    populateSelect(incomeSelect, archivedIncomeStatements);
  }

  function renderArchivedJournal(monthKey) {
    const table = document.getElementById("archivedJournalTable");
    const tbody = table.querySelector("tbody");
    tbody.innerHTML = "";
    if (!monthKey || !archivedJournals[monthKey]) {
      table.style.display = "none";
      return;
    }
    archivedJournals[monthKey].forEach(entry => {
      tbody.innerHTML +=
        `<tr>
          <td>${entry.date}</td>
          <td>${entry.description}</td>
          <td>${entry.debit.account}</td>
          <td>${entry.debit.amount.toFixed(2)}</td>
          <td></td>
        </tr>
        <tr>
          <td>${entry.date}</td>
          <td>${entry.description}</td>
          <td>${entry.credit.account}</td>
          <td></td>
          <td>${entry.credit.amount.toFixed(2)}</td>
        </tr>`;
    });
    table.style.display = "";
  }

  function renderArchivedIncome(monthKey) {
    const table = document.getElementById("archivedIncomeTable");
    const tbody = table.querySelector("tbody");
    const netIncomeEl = document.getElementById("archivedNetIncome");
    tbody.innerHTML = "";
    netIncomeEl.textContent = "";

    if (!monthKey || !archivedIncomeStatements[monthKey]) {
      table.style.display = "none";
      return;
    }
    const archive = archivedIncomeStatements[monthKey];
    const details = archive.details || {};

    for (const accName in details) {
      let bal = details[accName];
      const displayBal = bal < 0 ? `(${Math.abs(bal).toFixed(2)})` : bal.toFixed(2);
      tbody.innerHTML += `<tr><td>${accName}</td><td>${displayBal}</td></tr>`;
    }
    netIncomeEl.textContent = archive.netIncome < 0 ? `(${Math.abs(archive.netIncome).toFixed(2)})` : archive.netIncome.toFixed(2);
    table.style.display = "";
  }

  function archiveEntriesAndIncomeByEntryMonth() {
    const groupedJournals = {};
    journalEntries.forEach(entry => {
      const monthKey = getMonthKeyFromDateString(entry.date);
      if (!monthKey) return;
      if (!groupedJournals[monthKey]) groupedJournals[monthKey] = [];
      groupedJournals[monthKey].push(entry);
    });

    for (const monthKey in groupedJournals) {
      if (!archivedJournals[monthKey]) archivedJournals[monthKey] = [];
      archivedJournals[monthKey] = archivedJournals[monthKey].concat(groupedJournals[monthKey]);
    }

    for (const monthKey in groupedJournals) {
      const entries = groupedJournals[monthKey];
      const incomeBalances = {};

      accounts.forEach(acc => {
        if (acc.type === "Revenue" || acc.type === "Expense") {
          incomeBalances[acc.name] = 0;
        }
      });

      entries.forEach(entry => {
        if (incomeBalances.hasOwnProperty(entry.debit.account)) {
          incomeBalances[entry.debit.account] += entry.debit.amount;
        }
        if (incomeBalances.hasOwnProperty(entry.credit.account)) {
          incomeBalances[entry.credit.account] -= entry.credit.amount;
        }
      });

      let revenue = 0;
      let expense = 0;
      for (const accName in incomeBalances) {
        const acc = accounts.find(a => a.name === accName);
        if (!acc) continue;
        let balRaw = incomeBalances[accName];
        let bal = acc.type === "Revenue" ? balRaw : balRaw;
        incomeBalances[accName] = bal;
        if (acc.type === "Revenue") revenue += bal;
        else if (acc.type === "Expense") expense += bal;
      }

      archivedIncomeStatements[monthKey] = {
        details: incomeBalances,
        netIncome: revenue + expense,
      };
    }

    saveData();
    updateArchiveDropdowns();
  }

  // --- Event handlers ---

  document.getElementById("addAccountForm").addEventListener("submit", e => {
    e.preventDefault();
    const name = document.getElementById("newAccountName").value.trim();
    const type = document.getElementById("newAccountType").value;
    if (!name) return alert("Account name required.");
    if (accounts.find(acc => acc.name.toLowerCase() === name.toLowerCase())) {
      return alert("Account name already exists.");
    }
    accounts.push({ name, type });
    balances[name] = 0;
    saveData();
    renderAccountOptions();
    renderBalanceSheet();
    alert(`Account "${name}" added.`);
    e.target.reset();
  });

  document.getElementById("entryForm").addEventListener("submit", e => {
    e.preventDefault();
    const date = document.getElementById("date").value;
    const description = document.getElementById("description").value.trim();
    const debitAccount = document.getElementById("debitAccount").value;
    const debitAmount = parseFloat(document.getElementById("debitAmount").value);
    const creditAccount = document.getElementById("creditAccount").value;
    const creditAmount = parseFloat(document.getElementById("creditAmount").value);

    if (!date) return alert("Date is required.");
    if (!description) return alert("Description required.");
    if (!debitAccount || !creditAccount) return alert("Select debit and credit accounts.");
    if (isNaN(debitAmount) || debitAmount <= 0) return alert("Debit amount must be > 0.");
    if (isNaN(creditAmount) || creditAmount <= 0) return alert("Credit amount must be > 0.");
    if (debitAmount !== creditAmount) return alert("Debit and credit amounts must be equal.");
    if (debitAccount === creditAccount) return alert("Debit and credit accounts cannot be the same.");

    // Add journal entry
    const entry = {
      date,
      description,
      debit: { account: debitAccount, amount: debitAmount },
      credit: { account: creditAccount, amount: creditAmount }
    };
    journalEntries.push(entry);

    // Update balances
    balances[debitAccount] = (balances[debitAccount] || 0) + debitAmount;
    balances[creditAccount] = (balances[creditAccount] || 0) - creditAmount;

    saveData();
    renderJournal();
    renderBalanceSheet();
    renderIncomeStatement();

    archiveEntriesAndIncomeByEntryMonth();

    e.target.reset();
  });

  document.getElementById("clearJournalEntriesBtn").addEventListener("click", () => {
    if (!confirm("Are you sure you want to clear all journal entries?")) return;
    journalEntries = [];
    balances = {};
    accounts.forEach(acc => balances[acc.name] = 0);
    saveData();
    renderJournal();
    renderBalanceSheet();
    renderIncomeStatement();
  });

  document.getElementById("archivedJournalSelect").addEventListener("change", e => {
    renderArchivedJournal(e.target.value);
  });

  document.getElementById("archivedIncomeSelect").addEventListener("change", e => {
    renderArchivedIncome(e.target.value);
  });

  document.getElementById("closeMonth").addEventListener("click", () => {
    const month = document.getElementById("closeMonthSelect").value;
    if (!month) return alert("Select a month to close.");

    // Calculate net income for month
    const archive = archivedIncomeStatements[month];
    if (!archive) return alert("No income statement data for this month.");

    const netIncome = archive.netIncome;

    // Post journal entry to Retained Earnings
    if (netIncome === 0) return alert("Net income is zero. Nothing to close.");

    const date = `${month}-28`; // approximate month end date
    const description = `Close month ${month} to Retained Earnings`;

    // Net income > 0 means credit income -> debit Retained Earnings
    // We'll debit or credit Retained Earnings accordingly
    const debitAccount = netIncome < 0 ? "Retained Earnings" : null;
    const creditAccount = netIncome > 0 ? "Retained Earnings" : null;
    const amount = Math.abs(netIncome);

    if (!accounts.find(a => a.name === "Retained Earnings")) {
      alert('No "Retained Earnings" account found. Please add one.');
      return;
    }

    // Add the closing journal entry
    let entry;
    if (netIncome > 0) {
      entry = { date, description,
                debit: { account: "Revenue", amount: 0 }, // dummy placeholder to avoid logic errors
                credit: { account: "Retained Earnings", amount }
              };
      // Instead, better to post correct lines: Debit Income accounts and Credit RE? Let's do a simplified entry:
      entry = {
        date, description,
        debit: { account: "Retained Earnings", amount: 0 },
        credit: { account: "Retained Earnings", amount: 0 }
      };
      // We'll create two lines: one debit to Revenue and credit to RE for net income positive
      journalEntries.push({
        date,
        description,
        debit: { account: "Retained Earnings", amount: 0 },
        credit: { account: "Retained Earnings", amount: 0 }
      });
      alert("Closing entry logic for positive net income not fully implemented.");
      return;
    } else {
      alert("Closing negative net income not implemented.");
      return;
    }

    saveData();
    renderJournal();
    renderBalanceSheet();
    renderIncomeStatement();
  });

  document.getElementById("hardResetBtn").addEventListener("click", () => {
    if (!confirm("Are you sure you want to hard reset all accounts and balances?")) return;
    accounts = [];
    balances = {};
    journalEntries = [];
    archivedJournals = {};
    archivedIncomeStatements = {};
    saveData();
    renderAccountOptions();
    renderJournal();
    renderBalanceSheet();
    renderIncomeStatement();
    updateArchiveDropdowns();
    alert("Reset complete.");
  });

  // Initialize app
  loadData();
  renderAccountOptions();
  renderJournal();
  renderBalanceSheet();
  renderIncomeStatement();
  updateArchiveDropdowns();

})();
</script>
</body>
</html>
